pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

-- olijo's quest
--  maps across, 2 down = 16 maps
-- need code to move monsters left-right & up-down
-- collect the coins and get to the exit on each level
-- air timer?
--exit sprite
--death animation & sounds
--create screens;
--  ice level (friction in level settings)
--  night levels
--  day levels
--  3 types of baddies, couple frames animation
-- tune


local score
local game_objects
local lives
local level_data
local screen
local cur_level
local level


function _init()
 setup_constants()
	-- start the score counter at zero
	score=0
	lives=3

	-- create the game objects
	game_objects={}
	cur_level=1
 load_levels()
 level=level_data[cur_level]
 init_level_data(level)
	-- create a player
	make_player(level.spawnx, level.spawny)

	screen=scr_game
end


function init_level_data(level_obj)
 read_map(level_obj.mapx, level_obj.mapy)
 pal(1,level_obj.backcolour)
 palt(0,false)
 palt(level_obj.backcolour,true)
end

function load_levels()
 level_data={}
 add(level_data, make_level(0,0,col_blue,"intro",0,48))
 add(level_data, make_level(16,0,col_dark_blue,"outro",0,48))

end

function make_level(mapx,mapy,colour,title,spawnx,spawny)
 local obj={}
 obj.mapx=mapx
 obj.mapy=mapy
 obj.backcolour=colour
 obj.title=title
 obj.spawnx=spawnx
 obj.spawny=spawny
 return obj
end

function _update()
 if screen==scr_game then
  local obj
  -- update all the game object
  for obj in all(game_objects) do
   obj:update()
  end
 end
end


function _draw()
 if screen==scr_game then
  cls(level.backcolour)
  //-- draw all the game objects
  local obj
  for obj in all(game_objects) do
   obj:draw()
  end
  rectfill(0,121,127,127,9)
  print(level.title,2,122,0)
  print(get_score(),82,122,1)
  spr(8,115,121)
  print(lives,123,122,2)
 elseif screen==scr_game_over then
  cls(0)
  print("dead",0,0,15)
 end
end

function get_score()
 scr=10000+score
 return sub(scr,2,5).."0"
end

function restart_level()
for_each_game_object("player", function(player)
	player.x=level.spawnx
	player.y=level.spawny
	player.velocity_x=0
	player.velocity_y=0
	end )
end

function end_game()
 screen=scr_game_over
end

-- game object creation functions
function make_player(x,y)
 return make_game_object("player",x,y,{
  width=8,
  height=8,
  solid=false,
  sprite=0,
  move_speed=1,
  is_standing_on_block=false,
  is_facing_left=false,
  walk_counter=0,
  update = function(self)
   -- update walk counter
   if self.walk_counter==0 then
    self.walk_counter=8
   else
    self.walk_counter-=1
   end
   -- apply friction
   self.velocity_x*=0.2
   -- move the player with the arrow keys
   if btn(1) then
    self.velocity_x=self.move_speed
    self.is_facing_left=false
   end
   if btn(0) then
    self.velocity_x=-self.move_speed
	self.is_facing_left=true
   end
   -- jump when z is pressed
   if btn(4) and self.is_standing_on_block then
    self.velocity_y=-3
    sfx(3)
   end
   -- apply gravity
   self.velocity_y+=0.1
   -- make sure the velocity doesn't get too big
   self.velocity_x=mid(-3,self.velocity_x,3)
   self.velocity_y=mid(-3,self.velocity_y,3)
   -- apply the velocity
   self.x+=self.velocity_x
   self.y+=self.velocity_y
   -- clipping
   if (self.x>122) then
    self.x=122
    self.velocity_x=0
   elseif (self.x<-3) then
    self.x=-3
    self.velocity_x=0
   end
   if (self.y<0) then
    self.y=0
	   self.velocity_y=0
   elseif (self.y>122) then
    self.y=122
    self.velocity_y=0
   end			
   -- check to see if hitting coins
   oldscore=score
   for_each_game_object("coin",function(coin)
    if self:check_for_hit(coin) and not coin.is_collected then
	    coin.is_collected=true
	    score+=1
	    sfx(4)
	   end
   end
   //if oldscore!=score then self:check_end_level
   ) -- for_each_game_object
   
   -- check to see if colliding with blocks
   local was_standing_on_block=self.is_standing_on_block
   self.is_standing_on_block=false
   for_each_solid_object(function(block)
    local collision_dir=self:check_for_collision(block,3.1)
    self:handle_collision(block,collision_dir)
    if collision_dir=="down" then
     self.is_standing_on_block=true
     if not was_standing_on_block then
      sfx(5)
     end
    end
    if collision_dir=="up" then
     sfx(6)
    end
   end
   ) -- for_each_solid_object

   for_each_game_object("spike",function(spike)
    local collision_dir=self:check_for_collision(spike,3.1)
    self:handle_collision(spike,collision_dir)
    if collision_dir!=nil then
     lives=lives-1
     sfx(5)
     if lives>0 then
      restart_level()
     else
      end_game()
     end
    end
    if collision_dir=="up" then
     sfx(6)
    end
   end) --  for_each_game_object
  end, -- update function
  
  draw=function(self)
   local sprite_num
   if self.is_standing_on_block then
    if self.velocity_x==mid(-0.1,self.velocity_x,0.1) then
     sprite_num=8
    elseif self.walk_counter<4 then
     sprite_num=9
    else
     sprite_num=10
    end
   else
   if self.velocity_y>0 then
    sprite_num=12
   else
    sprite_num=11
   end
  end
  spr(sprite_num,self.x,self.y,1,1,self.is_facing_left)
 end -- function draw
}) -- make game object
end 



function make_block(sprite,x,y)
 return make_game_object("block",x,y,{
  width=8,
  height=8,
  solid=true,
  sprite=sprite,
  draw=function(self)
   spr(self.sprite,self.x,self.y)
  end
 })
end


function make_spike(sprite,x,y)
 return make_game_object("spike",x,y,{
  width=8,
  height=8,
  solid=false,
  sprite=sprite,
  draw=function(self)
   spr(self.sprite,self.x,self.y)
  end
 })
end


function make_coin(x,y)
 return make_game_object("coin",x,y,{
  width=6,
  height=7,
  solid=false,
  sprite=spr_coin,
  is_collected=false,
  draw=function(self)
   if not self.is_collected then
    spr(spr_coin,self.x,self.y)
   end
  end
 })
end


function make_game_object(name,x,y,props)
 local obj={
  name=name,
  x=x,
  y=y,
  solid=false,
  sprite=0,
  velocity_x=0,
  velocity_y=0,
  update=function(self)
   -- do nothing
  end,
  draw=function(self)
   -- don't draw anything
  end,
  draw_bounding_box=function(self,color)
   rect(self.x,self.y,self.x+self.width,self.y+self.height,color)
  end,
  center=function(self)
   return self.x+self.width/2,self.y+self.height/2
  end,
  check_for_hit=function(self,other)
   return bounding_boxes_overlapping(self,other)
  end,
  check_for_collision=function(self,other,indent)
   local x,y,w,h=self.x,self.y,self.width,self.height
   local top_hitbox={x=x+indent,y=y,width=w-2*indent,height=h/2}
   local bottom_hitbox={x=x+indent,y=y+h/2,width=w-2*indent,height=h/2}
   local left_hitbox={x=x,y=y+indent,width=w/2,height=h-2*indent}
   local right_hitbox={x=x+w/2,y=y+indent,width=w/2,height=h-2*indent}
   if bounding_boxes_overlapping(bottom_hitbox,other) then
    return "down"
   elseif bounding_boxes_overlapping(left_hitbox,other) then
    return "left"
   elseif bounding_boxes_overlapping(right_hitbox,other) then
    return "right"
   elseif bounding_boxes_overlapping(top_hitbox,other) then
    return "up"
   end
  end,
 handle_collision=function(self,other,dir)
  if dir=="down" then
   self.y=other.y-self.height
   if self.velocity_y>0 then
    self.velocity_y=0
   end
  elseif dir=="left" then
   self.x=other.x+other.width
   if self.velocity_x<0 then
    self.velocity_x=0
   end
  elseif dir=="right" then
   self.x=other.x-self.width
   if self.velocity_x>0 then
    self.velocity_x=0
   end
  elseif dir=="up" then
   self.y=other.y+other.height
   if self.velocity_y<0 then
    self.velocity_y=0
   end
  end
 end
 }

 -- add additional properties
 local key,value
 for key,value in pairs(props) do
  obj[key]=value
 end

 -- add it to the list of game objects
 add(game_objects,obj)
 -- return the game object
 return obj
end


-- hit detection helper functions
function rects_overlapping(left1,top1,right1,bottom1,left2,top2,right2,bottom2)
 return right1>left2 and right2>left1 and bottom1>top2 and bottom2>top1
end

function bounding_boxes_overlapping(obj1,obj2)
 return rects_overlapping( obj1.x, obj1.y, obj1.x+obj1.width, obj1.y+obj1.height, 
  obj2.x, obj2.y, obj2.x+obj2.width, obj2.y+obj2.height)
end


function for_each_game_object(name,callback)
 local obj
 for obj in all(game_objects) do
  if obj.name==name then
   callback(obj)
  end
 end
end


function for_each_solid_object(callback)
 local obj
 for obj in all(game_objects) do
  if obj.solid==true then
   callback(obj)
  end
 end
end


function read_map(x,y)
 for mapx=0,15 do
  for mapy=0,14 do
   tile=mget(x+mapx,y+mapy)
   if tile==spr_spikeup or 
      tile==spr_spikedown then
    make_spike(tile,mapx*8,mapy*8)
   elseif tile==spr_block or 
          tile==spr_grass or 
          tile==spr_ground then
    make_block(tile,mapx*8,mapy*8)
   elseif tile==spr_coin then
    make_coin(mapx*8,mapy*8)
   end
  end
 end
end


function setup_constants()
 col_black=0
 col_dark_blue=1
 col_dark_purple=2
 col_dark_green=3
 col_brown=4
 col_dark_gray=5
 col_light_gray=6
 col_white=7
 col_red=8
 col_orange=9
 col_yellow=10
 col_green=11       
 col_blue=12
 col_indigo=13
 col_pink=14
 col_peach=15

	spr_block=19
 spr_spikeup=23
 spr_spikedown=25
 spr_coin=24
 spr_grass=20
 spr_ground=21

	scr_game=1
	scr_menu=0
	scr_game_over=2
	scr_settings=3
	scr_splash=4
end


__gfx__
00000000000000000000000000000000ccc0b0cc0000000000000000000000001444441114444411144444111444441114444411000000000000000000000000
000000000000000000000000bbbbbbbbc00b300c00000000000000000000000014ffff1114ffff1114ffff1114f0f01114ffff11000000000000000000000000
000000000000000000000000bbbbbbbb099b394000000000000000000000000014f0f01114f0f01114f0f01114ffff1114ffff11000000000000000000000000
000000000000000000000000bbbbbbbb9949499400000000000000000000000014ffff1114ffff1114ffff1114ffff1114f0f011000000000000000000000000
000000000000000000000000bbbbbbbb949994940000000000000000000000001488881114888811148888111488881114888811000000000000000000000000
000000000000000000000000bbbbbbbb949994990000000000000000000000001488881114888811148888111488881114888811000000000000000000000000
000000000000000000000000bbbbbbbb949994990000000000000000000000001488881114888811148888111488881114888811000000000000000000000000
000000000000000000000000bbbbbbbb094994900000000000000000000000001171711111711171171117111171711111717111000000000000000000000000
00000000000000000000000066666660bbbbbbbb4444444411111111111111111100011170707070000000000000000000000000000000000000000000000000
000000000000000000000000622222204b4bb44b4444444411111111101110111069901177707770000000000000000000000000000000000000000000000000
00000000000000000000000062666620434444444444444411111111101110110699990107010701000000000000000000000000000000000000000000000000
00000000000000000000000062622020444434344444444411111111070107010696690107010701000000000000000000000000000000000000000000000000
00000000000000000000000062622020434344444444444411111111070107010699690107010701000000000000000000000000000000000000000000000000
00000000000000000000000062000020444443444444444411111111070107010699990110111011000000000000000000000000000000000000000000000000
00000000000000000000000062222220443444434444444411111111777077701069901110111011000000000000000000000000000000000000000000000000
00000000000000000000000000000000444444444444444411111111707070701100011111111111000000000000000000000000000000000000000000000000
__gff__
0000000002000000000000000000000000000001010100040004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1616161616161616161616161616161616161616161616161616131616161616030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1616161616161616161616161616161616161616161616161616131616161616030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1616161616161618161616161616161616161616181313161616131616161616030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1616161816161613131616161616161616161616131316181616131616161616020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1616161316161616161616161616161616161616161616131616131616161616020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1616161916131816161616161616161616161616161616161316131616161616020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1616161616161316161616161616161616161816161616161618131616161618020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1618181716161616161616181618181613131313131316161613131616161313020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1414141414161614161414141414141416161616161616131616161616181616020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515161615161515151515151516161616161616161616161616131616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515161615161515151515151516161616161616161816181616161616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515161615161515151515151516161616161616131313131316161616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515161615161515151515151516161616161616161616161616161616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515171715171515151515151516161616161616161616161616161616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151517171717171717171717171717171717000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010a0000180501a0501c0502405024050240502405024050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011300001b0661b0661b0661b0641b0671b0641b0630d0000d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01100000180551a0551c0552405024040240302402024010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0108000011440114411344114431174311b4211f42125411004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400
01070000180551c0551f0552405024031240110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000000c43000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400
011000000c41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
